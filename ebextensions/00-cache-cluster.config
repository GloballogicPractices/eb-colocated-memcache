Resources:
  CacheSubnetGroup:
    Type: "AWS::ElastiCache::SubnetGroup"
    Properties:
      Description: "Cache group for App"
      SubnetIds:
        Fn::Split:
          - ","
          - Fn::GetOptionSetting:
              Namespace: aws:ec2:vpc
              OptionName: Subnets

  CacheSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Lock cache down to webserver access only"
      VpcId:
        Fn::GetOptionSetting:
          Namespace: "aws:ec2:vpc"
          OptionName: "VpcId"
      SecurityGroupIngress :
        - IpProtocol : "tcp"
          FromPort :
            Fn::GetOptionSetting:
              OptionName : "CachePort"
              DefaultValue: "11211"
          ToPort :
            Fn::GetOptionSetting:
              OptionName : "CachePort"
              DefaultValue: "11211"
          SourceSecurityGroupId:
            Fn::GetAtt: [ "AWSEBSecurityGroup", GroupId ]

  CachePeerInbound:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      FromPort: 11211
      ToPort: 11212
      IpProtocol: "tcp"
      SourceSecurityGroupId:
        Fn::GetAtt: [ "AWSEBSecurityGroup", GroupId ]
      GroupId:
        Fn::GetAtt: [ "AWSEBSecurityGroup", GroupId ]

  ElastiCache:
    Type: "AWS::ElastiCache::CacheCluster"
    Properties:
      AZMode: "cross-az"
      CacheNodeType:
        Fn::GetOptionSetting:
          OptionName : "CacheNodeType"
          DefaultValue : "cache.t2.small"
      NumCacheNodes:
        Fn::GetOptionSetting:
          OptionName : "NumCacheNodes"
          DefaultValue : "2"
      Engine: "memcached"
      CacheSubnetGroupName:
        Ref: CacheSubnetGroup
      VpcSecurityGroupIds:
        - Fn::GetAtt: [ CacheSecurityGroup, GroupId ]

  MountTargetA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: 
        Ref: FileSystem
      SecurityGroups:
        - Fn::GetAtt: [ MountTargetSecurityGroup, GroupId ]
      SubnetId:
        Fn::Select:
        - 0
        - Fn::Split:
          - ","
          - Fn::GetOptionSetting:
              Namespace: "aws:ec2:vpc"
              OptionName: Subnets

  MountTargetB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: 
        Ref: FileSystem
      SecurityGroups:
      - Ref: MountTargetSecurityGroup
      SubnetId:
        Fn::Select:
          - 1
          - Fn::Split:
              - ','
              - Fn::GetOptionSetting:
                  Namespace: "aws:ec2:vpc"
                  OptionName: Subnets

  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      FileSystemTags:
      - Key: Name
        Value:
          Fn::Join:
            - '-'
            - - Ref: AWSEBEnvironmentName
              - 'cache-config' 

  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
      - FromPort: '2049'
        IpProtocol: tcp
        SourceSecurityGroupId:
          Fn::GetAtt: [ AWSEBSecurityGroup, GroupId ]
        ToPort: '2049'
      VpcId:
        Fn::GetOptionSetting: 
          Namespace: "aws:ec2:vpc"
          OptionName: VpcId
